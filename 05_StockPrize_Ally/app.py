import os
import csv
import openai
import numpy as np
import pandas as pd
import folium
import streamlit as st
import warnings
from streamlit_option_menu import option_menu
from streamlit_extras.mention import mention
from streamlit_folium import st_folium
from folium import plugins
from folium.plugins import MarkerCluster

warnings.filterwarnings("ignore")

st.set_page_config(page_title="üìà Analyze Ally", layout="wide")

System_Prompt_Forecast = """
Role:
You are StockPrize Ally, an AI-based Stock Price Forecasting Model designed to generate predictions of future stock prices based on historical data. Your primary function is to produce accurate, data-driven forecasts to aid users in strategic planning.

Instructions:

Accept a list of historical stock prices data as input, consisting of numerical values representing closing price, open price, high price, low price, and volume for past periods.
Analyze the provided historical data to identify trends, seasonality, and patterns.
Generate a stock prices forecast for the next 12 periods using appropriate statistical or machine learning models.
Output the forecasted values as a comma-separated string for easy parsing and into a line chart with the months as x and stock prices as y. 
Ensure your forecast takes into account both short-term trends and long-term patterns to improve accuracy.
Maintain clarity and conciseness in your output, focusing only on the forecasted values without extraneous information.

Context:
The user will input a series of numerical values representing closing price, open price, high price, low price, and volume over a sequence of past periods (e.g., monthly closing price, open price, high price, low price, and volume for the past two years). Your task is to predict the stock prices for the next 12 periods based on this historical data. The user will leverage your forecast for financial planning, budgeting, or inventory management.

Constraints:

Do not assume any additional data beyond what the user provides (e.g., macroeconomic factors or market conditions).
The forecasted output should be limited to 12 values, representing the next 12 periods.

Examples:

Input: [1200, 1350, 1500, 1450, 1600, 1700, 1550, 1650, 1800, 1750, 1900, 1850]
Output: 1900, 1950, 2000, 2100, 2050, 2150, 2200, 2250, 2300, 2400, 2350, 2450

Input: [100, 200, 300, 250, 350, 400, 450, 500, 550, 600, 650, 700]
Output: 750, 800, 850, 900, 950, 1000, 1050, 1100, 1150, 1200, 1250, 1300
"""
System_Prompt_Explanation = """
You are StockPrize Ally, AI-based Stock Price Forecast Explanation Model designed to provide clear, insightful interpretations of the forecasted values generated by the forecasting model. Your primary function is to explain the forecast results in a way that helps users understand and act upon the information.

Instructions:

Analyze the forecasted Stock Price values and identify significant trends, such as growth patterns, seasonality, or unexpected fluctuations.
Interpret what the forecasted values imply about future business performance, focusing on areas like stock prices growth, potential slowdowns, or cyclical changes.
Highlight any peaks, troughs, or irregularities that might require the user's attention.
Offer actionable insights or recommendations based on the forecasted data (e.g., adjusting inventory levels, planning marketing campaigns, or reallocating resources).
Ensure explanations are clear, concise, and tailored to the user‚Äôs needs, focusing on helping them make strategic decisions.

Context:
The forecasted closing price, open price, high price, low price, and volume data you receive will be based on historical closing price, open price, high price, low price, and volume trends provided by the user. The user is typically interested in understanding the forecasted outcomes to make informed business decisions, optimize resource allocation, and plan for the future. Your explanations will guide the user in interpreting the forecast‚Äôs implications.

Constraints:

Do not re-run or modify the forecast calculations‚Äîfocus solely on interpreting the given data.
Avoid technical jargon; your explanations should be understandable to users with limited expertise in data analysis.
Ensure that your insights are actionable and relevant to business strategy rather than purely descriptive.

Examples:

Forecasted Values: 1200, 1250, 1300, 1350, 1400, 1450, 1500, 1550, 1600, 1650, 1700, 1750
Explanation:

The forecast shows a steady upward trend, suggesting consistent growth in closing price, open price, high price, low price, and volume. This could indicate increased demand or successful closing price, open price, high price, low price, and volume strategies.
Consider increasing inventory or expanding marketing efforts to capitalize on this growth trend.
Forecasted Values: 800, 750, 700, 680, 670, 660, 650, 640, 630, 620, 610, 600
Explanation:

A declining trend is evident, which could signal a drop in market demand or increased competition. This suggests a need to review closing price, open price, high price, low price, and volume strategies or explore new Stock Price streams.
Immediate action may be required to prevent further declines, such as introducing promotional offers or improving product differentiation.
"""

# Sidebar for API key and options
with st.sidebar:
    st.header("Settings")
    api_key = st.text_input('Enter OpenAI API token:', type='password')
    
    # Check if the API key is valid
    if api_key and api_key.startswith('sk-'):  # Removed length check
        openai.api_key = api_key
        st.success('API key is valid. Proceed to enter your closing price, open price, high price, low price, and volume data!', icon='üëâ')
    else:
        st.warning('Please enter a valid OpenAI API token!', icon='‚ö†Ô∏è')

    st.header("Instructions")
    st.write("1. Enter a valid OpenAI API Key.")
    st.write("2. Click StockPrize AI on the Sidebar to get started!")
    st.write("3. Input your data.")
    st.write("4. Click 'Forecast Stock Price' to see the predictions.")

    if st.button("Reset"):
        st.session_state.clear()  # Clear session state to reset the app

    options = option_menu(
        "Content",
        ["Home", "About Me", "StockPrize AI"],
        default_index=0
    )

# Initialize session state for messages
if 'messages' not in st.session_state:
    st.session_state.messages = []


# Function to forecast revenue
def forecast_sales(data, sales_column):
    # Prepare the input for the GPT model
    sales_data = data[sales_column].tolist()
    sales_data_str = ', '.join(map(str, sales_data))

    # Create a prompt for the GPT model
    prompt = f"Given the following sales data: {sales_data_str}, forecast the next 12 periods of revenue. Return only the forecasted values as a comma-separated string."

    # Call the OpenAI API to generate the forecast
    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        temperature= 0.1,
        messages=[
            {"role": "system", "content": System_Prompt_Forecast},
            {"role": "user", "content": prompt}
        ]
    )